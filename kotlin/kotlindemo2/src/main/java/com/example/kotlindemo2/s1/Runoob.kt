package com.example.kotlindemo2.s1

// 类定义
// 1、可以定义空类 class Empty
// 2、创建对象不需要new关键字  var site = Runoob()
// 3、访问属性，直接用名称引用即可  var name = site.name

// 类的属性
// 1、可变变量用var，只读变量用val
// 2、非空属性必须在定义的时候初始化,kotlin提供了一种可以延迟初始化的方案,使用 lateinit 关键字描述属性

// 主构造器
// 1、主构造器中不能包含任何代码，初始化代码可以放在初始化代码段中，初始化代码段使用 init 关键字作为前缀。
// 2、类可以有一个主构造函数，一个或多个次构造函数,主构造器是类头部的一部分，位于类名称之后
// 3、如果主构造器没有任何注解或可见度修饰符，constructor关键字可以省略。

// 次构造器
// 1、如果类有主构造函数，每个次构造函数都要直接或间接调用主构造函数。在同一个类中调用另一个构造函数使用this关键字
// 2、如果一个非抽象类没有构造函数，它会产生一个public无参数构造函数，如果你不想你的类有公共的构造函数，你就得声明一个空的主构造函数
// 3、在 JVM 虚拟机中，如果主构造函数的所有参数都有默认值，编译器会生成一个附加的无参的构造函数，这个构造函数会直接使用默认值

// 嵌套类
// 1、调用格式：外部类.嵌套类.嵌套类方法/属性

// 内部类
// 1、使用inner关键字

// 匿名内部类
// 使用对象表达式来创建匿名内部类，关键字object

// 类属性修饰符：abstract final open enum annotation
// 访问权限修饰符：private protected  public internal

// Kotlin继承
// 1、Any类是所有类的超类，Any类默认提供了三个函数：equals()  hashCode()  toString()  注意：Any不是java.lang.object
// 2、如果一个类要被继承或者属性要被重写，可以使用open关键字进行修饰。

// 构造函数
// 1、如果子类有主构造函数，则基类必须在主构造函数中立即初始化
// 2、如果子类没有主构造函数，次级构造函数必须直接或间接使用super关键字初始化基类（初始化基类时可以调用基类的不同的构造函数）

// 重写
// 1、函数默认为final修饰，不能被重写。如果允许子类重写该函数，那么就要手动添加open修饰它，子类重写方法使用override关键字
// 2、如果有多个相同的方法（继承或者实现自其他类，如A、B类），则必须要重写该方法，使用super<>泛型去选择性地调用父类的实现。
// 3、接口的成员变量默认是open的

// 属性重写
// 1、属性重写使用override关键字，属性必须具有兼容类型，每一个声明的属性都可以通过初始化程序或者getter方法被重写
// 2、可以用一个var属性重写一个val属性，反过来不行。因为val属性本身只定义了getter方法，重写var属性会在衍生类中额外声明一个setter方法
// 3、可以在主构造函数中使用 override 关键字作为属性声明的一部分

// Kotlin接口
// 1、使用interface关键字定义接口，允许接口有默认实现
// 2、一个类或者对象可以实现一个或多个接口
// 3、接口中的属性只能是抽象的，不允许初始化值，接口不会保存属性值，实现接口时，必须重写属性

// 扩展函数     fun 类名.函数名(){}
// 1、扩展是一种静态行为，对被扩展的类代码本身不会造成任何影响
// 2、若扩展函数和成员函数一致，则使用该函数时，会优先使用成员函数
// 3、通常扩展函数或属性定义在顶级包下

// 扩展属性
// 1、扩展属性允许定义在类或者kotlin文件中，不允许定义在函数中
// 2、扩展属性只能是val,不允许被初始化，只能由显式提供的getter/setter定义

// 伴生对象的扩展函数
// 1、如果一个类定义有一个伴生对象,可以为伴生对象定义扩展函数和属性。
// 2、伴生对象通过"类名."形式调用伴生对象，伴生对象声明的扩展函数，通过用类名限定符来调用：

// 数据类
// 1、主构造函数至少有一个参数
// 2、主构造函数里的属性必须使用var或val标识
// 3、数据类不能是  抽象abstract 继承open  密封sealed  内部inner
// 4、数据类不能继承其他类，但可以实现接口

const val PI = 3.1415

fun main(args: Array<String>) {
    val age:Int = 20
    val price = 10.02f
    println(price)
}


